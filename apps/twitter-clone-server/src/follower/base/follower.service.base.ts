/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, Follower as PrismaFollower } from "@prisma/client";

export class FollowerServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.FollowerCountArgs, "select">): Promise<number> {
    return this.prisma.follower.count(args);
  }

  async followers(
    args: Prisma.FollowerFindManyArgs
  ): Promise<PrismaFollower[]> {
    return this.prisma.follower.findMany(args);
  }
  async follower(
    args: Prisma.FollowerFindUniqueArgs
  ): Promise<PrismaFollower | null> {
    return this.prisma.follower.findUnique(args);
  }
  async createFollower(
    args: Prisma.FollowerCreateArgs
  ): Promise<PrismaFollower> {
    return this.prisma.follower.create(args);
  }
  async updateFollower(
    args: Prisma.FollowerUpdateArgs
  ): Promise<PrismaFollower> {
    return this.prisma.follower.update(args);
  }
  async deleteFollower(
    args: Prisma.FollowerDeleteArgs
  ): Promise<PrismaFollower> {
    return this.prisma.follower.delete(args);
  }

  async findFollowers(
    parentId: string,
    args: Prisma.FollowerFindManyArgs
  ): Promise<PrismaFollower[]> {
    return this.prisma.follower
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .followers(args);
  }

  async getFollower(parentId: string): Promise<PrismaFollower | null> {
    return this.prisma.follower
      .findUnique({
        where: { id: parentId },
      })
      .follower();
  }
}

/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { FollowerService } from "../follower.service";
import { FollowerCreateInput } from "./FollowerCreateInput";
import { Follower } from "./Follower";
import { FollowerFindManyArgs } from "./FollowerFindManyArgs";
import { FollowerWhereUniqueInput } from "./FollowerWhereUniqueInput";
import { FollowerUpdateInput } from "./FollowerUpdateInput";

export class FollowerControllerBase {
  constructor(protected readonly service: FollowerService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Follower })
  async createFollower(
    @common.Body() data: FollowerCreateInput
  ): Promise<Follower> {
    return await this.service.createFollower({
      data: {
        ...data,

        follower: data.follower
          ? {
              connect: data.follower,
            }
          : undefined,
      },
      select: {
        createdAt: true,

        follower: {
          select: {
            id: true,
          },
        },

        following: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Follower] })
  @ApiNestedQuery(FollowerFindManyArgs)
  async followers(@common.Req() request: Request): Promise<Follower[]> {
    const args = plainToClass(FollowerFindManyArgs, request.query);
    return this.service.followers({
      ...args,
      select: {
        createdAt: true,

        follower: {
          select: {
            id: true,
          },
        },

        following: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Follower })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async follower(
    @common.Param() params: FollowerWhereUniqueInput
  ): Promise<Follower | null> {
    const result = await this.service.follower({
      where: params,
      select: {
        createdAt: true,

        follower: {
          select: {
            id: true,
          },
        },

        following: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Follower })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateFollower(
    @common.Param() params: FollowerWhereUniqueInput,
    @common.Body() data: FollowerUpdateInput
  ): Promise<Follower | null> {
    try {
      return await this.service.updateFollower({
        where: params,
        data: {
          ...data,

          follower: data.follower
            ? {
                connect: data.follower,
              }
            : undefined,
        },
        select: {
          createdAt: true,

          follower: {
            select: {
              id: true,
            },
          },

          following: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Follower })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteFollower(
    @common.Param() params: FollowerWhereUniqueInput
  ): Promise<Follower | null> {
    try {
      return await this.service.deleteFollower({
        where: params,
        select: {
          createdAt: true,

          follower: {
            select: {
              id: true,
            },
          },

          following: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Get("/:id/followers")
  @ApiNestedQuery(FollowerFindManyArgs)
  async findFollowers(
    @common.Req() request: Request,
    @common.Param() params: FollowerWhereUniqueInput
  ): Promise<Follower[]> {
    const query = plainToClass(FollowerFindManyArgs, request.query);
    const results = await this.service.findFollowers(params.id, {
      ...query,
      select: {
        createdAt: true,

        follower: {
          select: {
            id: true,
          },
        },

        following: true,
        id: true,
        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/followers")
  async connectFollowers(
    @common.Param() params: FollowerWhereUniqueInput,
    @common.Body() body: FollowerWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      followers: {
        connect: body,
      },
    };
    await this.service.updateFollower({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/followers")
  async updateFollowers(
    @common.Param() params: FollowerWhereUniqueInput,
    @common.Body() body: FollowerWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      followers: {
        set: body,
      },
    };
    await this.service.updateFollower({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/followers")
  async disconnectFollowers(
    @common.Param() params: FollowerWhereUniqueInput,
    @common.Body() body: FollowerWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      followers: {
        disconnect: body,
      },
    };
    await this.service.updateFollower({
      where: params,
      data,
      select: { id: true },
    });
  }
}
